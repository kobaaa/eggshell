{:eggshell/file-type "eggshell spreadsheet", :eggshell/version "v1", :eggshell/graph {:nodeset #{:d1 :a2 :d0 :a1 :c2 :b0 :a6 :c0 :a0 :c1 :a5 :c5 :b6 :d3 :b5}, :adj {:a0 #{:a1}, :a1 #{:a2}, :b0 #{:d0}, :c0 #{:d0}, :c1 #{:d1 :c2}, :b5 #{:c5}, :b6 #{:c5}}, :in {:a1 #{:a0}, :a2 #{:a1}, :d0 #{:b0 :c0}, :d1 #{:c1}, :c5 #{:b6 :b5}, :c2 #{:c1}}, :attrs {:d1 {:eggshell.graph/raw-code "(map (fn [x] (float (/ x 9))) c1)", :eggshell.controller/code (clojure.core/fn [cells] (map (fn* ([x] (clojure.lang.Numbers/divide x 10))) (clojure.lang.RT/get cells :c1))), :eggshell.graph/code (clojure.core/fn [cells] (map (fn* ([x] (clojure.lang.RT/floatCast (clojure.lang.Numbers/divide x 9)))) (clojure.lang.RT/get cells :c1))), :value (3.3333333 8.777778 0.11111111 3333.3333)}, :a2 {:eggshell.graph/raw-code "(* a1 8)", :value 4.800000190734863, :eggshell.controller/code (clojure.core/fn [cells] (clojure.lang.Numbers/multiply (clojure.lang.RT/get cells :a1) 8))}, :d0 {:eggshell.graph/raw-code "(str b0 c0)", :value "this is a cat dude", :eggshell.controller/code (clojure.core/fn [cells] (str (clojure.lang.RT/get cells :b0) (clojure.lang.RT/get cells :c0)))}, :a1 {:eggshell.graph/raw-code "(float (/ a0 20))", :eggshell.controller/code (clojure.core/fn [cells] (clojure.lang.RT/floatCast (clojure.lang.Numbers/divide (clojure.lang.RT/get cells :a0) 10))), :eggshell.graph/code (clojure.core/fn [cells] (clojure.lang.RT/floatCast (clojure.lang.Numbers/divide (clojure.lang.RT/get cells :a0) 20))), :value 0.6}, :c2 {:eggshell.graph/raw-code "(map #(+ 500 %) c1)", :eggshell.controller/code (clojure.core/fn [cells] (map (fn* ([p1__19419#] (clojure.lang.Numbers/add 100 p1__19419#))) (clojure.lang.RT/get cells :c1))), :eggshell.graph/code (clojure.core/fn [cells] (map (fn* ([p1__19542#] (clojure.lang.Numbers/add 500 p1__19542#))) (clojure.lang.RT/get cells :c1))), :value (530 579 501 30500)}, :b0 {:value "this"}, :a6 {:value "name"}, :c0 {:value " is a cat dude"}, :a0 {:value 12}, :c1 {:value [30 79 1 30000]}, :a5 {:value "animal"}, :c5 {:eggshell.graph/raw-code "(str \"is this a \" b5 \", \" b6 \"?\")", :value "is this a sea otter, man?", :eggshell.controller/code (clojure.core/fn [cells] (str "is this a " (clojure.lang.RT/get cells :b5) ", " (clojure.lang.RT/get cells :b6) "?"))}, :b6 {:value "man"}, :d3 {:value ""}, :b5 {:value "sea otter"}}}}